#!/bin/bash

printErr()
{
    printf "%s\n" "$*" >&2;
}

die()
{
    BASE=$(basename "$0")
    printErr "$BASE: error: $@"
    exit 1
}

show_version_and_exit()
{
    echo "@PACKAGE_NAME@ - @VERSION@"
    echo "License: MIT" #TODO add license
    exit 0
}

show_help_and_exit()
{
    BASE=$(basename "$1")
    echo "@PACKAGE_NAME@ - @summary@

Usage: $BASE [OPTIONS] <COMMAND> DATABASE

COMMAND - one of 'init' or 'attach'
    init - initialize the database
    attach - attach the config
DATABASE - sqlite3 database

Options:
    -h        = This help screen.
    -v        = be verbose
    -V        = print version.

Website: @PACKAGE_URL@
bug-reports/questions: @PACKAGE_BUGREPORT@

"

    exit
}

init()
{
    echo
}

attach()
{
    repo="$(pwd)"

    # test if theres a .git directory
    if [ ! -d "$repo/.git" ]
    then
        printErr "'$repo' isn't the parent directory of a git repository"
        exit 1
    fi

    printErr "$repo"
}

# Default values for parameters
show_usage=
show_version=
verbose=
# Parse parameters
while getopts Vvh param
do
    case $param in
    h)   show_help=1;;
    v)   verbose=1;;
    V)   show_version=1;;
    ?)   die "unknown command line option";;
    esac
done
shift $(($OPTIND - 1))

# Validate parameters
test -n "$show_help" && show_help_and_exit
test -n "$show_version" && show_version_and_exit
test -z "$1" && die "missing command. See -h for help"
test -z "$2" && die "missing database. See -h for help"

# Set inputs
cmd="$1"
db="$2"

# run the command
case $cmd in
    "init")   init;;
    "attach") attach;;
    *)      die "unknown command. See -h for help"
esac
